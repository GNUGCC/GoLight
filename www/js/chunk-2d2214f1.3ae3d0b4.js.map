{"version":3,"sources":["webpack:///./node_modules/@capacitor-community/bluetooth-le/dist/esm/timeout.js","webpack:///./node_modules/@capacitor-community/bluetooth-le/dist/esm/web.js"],"names":["async","runWithTimeout","promise","time","exception","timer","Promise","race","_","reject","setTimeout","finally","clearTimeout","super","arguments","this","deviceMap","Map","discoveredDevices","scan","DEFAULT_CONNECTION_TIMEOUT","navigator","bluetooth","unavailable","isAvailable","getAvailability","value","options","filters","getFilters","device","requestDevice","length","undefined","optionalServices","acceptAllDevices","set","id","bleDevice","getBleDevice","requestBleDeviceOptions","stopLEScan","removeEventListener","onAdvertisementReceived","addEventListener","requestLEScan","acceptAllAdvertisements","keepRepeatedDevices","allowDuplicates","event","_a","_b","deviceId","BluetoothLe","isNew","has","result","localName","name","rssi","txPower","manufacturerData","serviceData","uuids","map","notifyListeners","active","stop","_options","devices","getDevices","bleDevices","filter","gatt","connected","getDeviceFromMap","onDisconnected","timeoutError","Symbol","Error","timeout","connect","error","disconnect","target","key","services","getPrimaryServices","bleServices","service","characteristics","getCharacteristics","bleCharacteristics","characteristic","push","uuid","properties","getProperties","descriptors","getDescriptors","descriptor","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","getPrimaryService","getCharacteristic","getDescriptor","readValue","dataView","writeValueWithResponse","writeValueWithoutResponse","writeValue","onCharacteristicValueChanged","startNotifications","stopNotifications","namePrefix","get"],"mappings":"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","file":"js/chunk-2d2214f1.3ae3d0b4.js","sourcesContent":["export async function runWithTimeout(promise, time, exception) {\n    let timer;\n    return Promise.race([\n        promise,\n        new Promise((_, reject) => {\n            timer = setTimeout(() => reject(exception), time);\n        }),\n    ]).finally(() => clearTimeout(timer));\n}\n//# sourceMappingURL=timeout.js.map","import { WebPlugin } from '@capacitor/core';\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport { runWithTimeout } from './timeout';\nexport class BluetoothLeWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.deviceMap = new Map();\n        this.discoveredDevices = new Map();\n        this.scan = null;\n        this.DEFAULT_CONNECTION_TIMEOUT = 10000;\n    }\n    async initialize() {\n        if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n            throw this.unavailable('Web Bluetooth API not available in this browser.');\n        }\n        const isAvailable = await navigator.bluetooth.getAvailability();\n        if (!isAvailable) {\n            throw this.unavailable('No Bluetooth radio available.');\n        }\n    }\n    async isEnabled() {\n        // not available on web\n        return { value: true };\n    }\n    async enable() {\n        throw this.unavailable('enable is not available on web.');\n    }\n    async disable() {\n        throw this.unavailable('disable is not available on web.');\n    }\n    async startEnabledNotifications() {\n        // not available on web\n    }\n    async stopEnabledNotifications() {\n        // not available on web\n    }\n    async isLocationEnabled() {\n        throw this.unavailable('isLocationEnabled is not available on web.');\n    }\n    async openLocationSettings() {\n        throw this.unavailable('openLocationSettings is not available on web.');\n    }\n    async openBluetoothSettings() {\n        throw this.unavailable('openBluetoothSettings is not available on web.');\n    }\n    async openAppSettings() {\n        throw this.unavailable('openAppSettings is not available on web.');\n    }\n    async setDisplayStrings() {\n        // not available on web\n    }\n    async requestDevice(options) {\n        const filters = this.getFilters(options);\n        const device = await navigator.bluetooth.requestDevice({\n            filters: filters.length ? filters : undefined,\n            optionalServices: options === null || options === void 0 ? void 0 : options.optionalServices,\n            acceptAllDevices: filters.length === 0,\n        });\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n    }\n    async requestLEScan(options) {\n        this.requestBleDeviceOptions = options;\n        const filters = this.getFilters(options);\n        await this.stopLEScan();\n        this.discoveredDevices = new Map();\n        navigator.bluetooth.removeEventListener('advertisementreceived', this.onAdvertisementReceived);\n        navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceived);\n        this.scan = await navigator.bluetooth.requestLEScan({\n            filters: filters.length ? filters : undefined,\n            acceptAllAdvertisements: filters.length === 0,\n            keepRepeatedDevices: options === null || options === void 0 ? void 0 : options.allowDuplicates,\n        });\n    }\n    onAdvertisementReceived(event) {\n        var _a, _b;\n        // do not use `this` in event listener\n        const deviceId = event.device.id;\n        BluetoothLe.deviceMap.set(deviceId, event.device);\n        const isNew = !BluetoothLe.discoveredDevices.has(deviceId);\n        if (isNew || ((_a = BluetoothLe.requestBleDeviceOptions) === null || _a === void 0 ? void 0 : _a.allowDuplicates)) {\n            BluetoothLe.discoveredDevices.set(deviceId, true);\n            const device = BluetoothLe.getBleDevice(event.device);\n            const result = {\n                device,\n                localName: device.name,\n                rssi: event.rssi,\n                txPower: event.txPower,\n                manufacturerData: mapToObject(event.manufacturerData),\n                serviceData: mapToObject(event.serviceData),\n                uuids: (_b = event.uuids) === null || _b === void 0 ? void 0 : _b.map(webUUIDToString),\n            };\n            BluetoothLe.notifyListeners('onScanResult', result);\n        }\n    }\n    async stopLEScan() {\n        var _a;\n        if ((_a = this.scan) === null || _a === void 0 ? void 0 : _a.active) {\n            this.scan.stop();\n        }\n        this.scan = null;\n    }\n    async getDevices(_options) {\n        const devices = await navigator.bluetooth.getDevices();\n        const bleDevices = devices.map((device) => {\n            this.deviceMap.set(device.id, device);\n            const bleDevice = this.getBleDevice(device);\n            return bleDevice;\n        });\n        return { devices: bleDevices };\n    }\n    async getConnectedDevices(_options) {\n        const devices = await navigator.bluetooth.getDevices();\n        const bleDevices = devices\n            .filter((device) => {\n            var _a;\n            return (_a = device.gatt) === null || _a === void 0 ? void 0 : _a.connected;\n        })\n            .map((device) => {\n            this.deviceMap.set(device.id, device);\n            const bleDevice = this.getBleDevice(device);\n            return bleDevice;\n        });\n        return { devices: bleDevices };\n    }\n    async connect(options) {\n        var _a, _b;\n        const device = this.getDeviceFromMap(options.deviceId);\n        device.removeEventListener('gattserverdisconnected', this.onDisconnected);\n        device.addEventListener('gattserverdisconnected', this.onDisconnected);\n        const timeoutError = Symbol();\n        if (device.gatt === undefined) {\n            throw new Error('No gatt server available.');\n        }\n        try {\n            const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.DEFAULT_CONNECTION_TIMEOUT;\n            await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n        }\n        catch (error) {\n            // cancel pending connect call, does not work yet in chromium because of a bug:\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n            await ((_b = device.gatt) === null || _b === void 0 ? void 0 : _b.disconnect());\n            if (error === timeoutError) {\n                throw new Error('Connection timeout');\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    onDisconnected(event) {\n        // do not use `this` in event listener\n        const deviceId = event.target.id;\n        const key = `disconnected|${deviceId}`;\n        BluetoothLe.notifyListeners(key, null);\n    }\n    async createBond(_options) {\n        throw this.unavailable('createBond is not available on web.');\n    }\n    async isBonded(_options) {\n        throw this.unavailable('isBonded is not available on web.');\n    }\n    async disconnect(options) {\n        var _a;\n        (_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.disconnect();\n    }\n    async getServices(options) {\n        var _a, _b;\n        const services = (_b = (await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryServices()))) !== null && _b !== void 0 ? _b : [];\n        const bleServices = [];\n        for (const service of services) {\n            const characteristics = await service.getCharacteristics();\n            const bleCharacteristics = [];\n            for (const characteristic of characteristics) {\n                bleCharacteristics.push({\n                    uuid: characteristic.uuid,\n                    properties: this.getProperties(characteristic),\n                    descriptors: await this.getDescriptors(characteristic),\n                });\n            }\n            bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n        }\n        return { services: bleServices };\n    }\n    async getDescriptors(characteristic) {\n        try {\n            const descriptors = await characteristic.getDescriptors();\n            return descriptors.map((descriptor) => ({\n                uuid: descriptor.uuid,\n            }));\n        }\n        catch (_a) {\n            return [];\n        }\n    }\n    getProperties(characteristic) {\n        return {\n            broadcast: characteristic.properties.broadcast,\n            read: characteristic.properties.read,\n            writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n            write: characteristic.properties.write,\n            notify: characteristic.properties.notify,\n            indicate: characteristic.properties.indicate,\n            authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n            reliableWrite: characteristic.properties.reliableWrite,\n            writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n        };\n    }\n    async getCharacteristic(options) {\n        var _a;\n        const service = await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryService(options === null || options === void 0 ? void 0 : options.service));\n        return service === null || service === void 0 ? void 0 : service.getCharacteristic(options === null || options === void 0 ? void 0 : options.characteristic);\n    }\n    async getDescriptor(options) {\n        const characteristic = await this.getCharacteristic(options);\n        return characteristic === null || characteristic === void 0 ? void 0 : characteristic.getDescriptor(options === null || options === void 0 ? void 0 : options.descriptor);\n    }\n    async readRssi(_options) {\n        throw this.unavailable('readRssi is not available on web.');\n    }\n    async read(options) {\n        const characteristic = await this.getCharacteristic(options);\n        const value = await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.readValue());\n        return { value };\n    }\n    async write(options) {\n        const characteristic = await this.getCharacteristic(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithResponse(dataView));\n    }\n    async writeWithoutResponse(options) {\n        const characteristic = await this.getCharacteristic(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithoutResponse(dataView));\n    }\n    async readDescriptor(options) {\n        const descriptor = await this.getDescriptor(options);\n        const value = await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.readValue());\n        return { value };\n    }\n    async writeDescriptor(options) {\n        const descriptor = await this.getDescriptor(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writeValue(dataView));\n    }\n    async startNotifications(options) {\n        const characteristic = await this.getCharacteristic(options);\n        characteristic === null || characteristic === void 0 ? void 0 : characteristic.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChanged);\n        characteristic === null || characteristic === void 0 ? void 0 : characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChanged);\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.startNotifications());\n    }\n    onCharacteristicValueChanged(event) {\n        var _a, _b;\n        // do not use `this` in event listener\n        const characteristic = event.target;\n        const key = `notification|${(_a = characteristic.service) === null || _a === void 0 ? void 0 : _a.device.id}|${(_b = characteristic.service) === null || _b === void 0 ? void 0 : _b.uuid}|${characteristic.uuid}`;\n        BluetoothLe.notifyListeners(key, {\n            value: characteristic.value,\n        });\n    }\n    async stopNotifications(options) {\n        const characteristic = await this.getCharacteristic(options);\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.stopNotifications());\n    }\n    getFilters(options) {\n        var _a;\n        const filters = [];\n        for (const service of (_a = options === null || options === void 0 ? void 0 : options.services) !== null && _a !== void 0 ? _a : []) {\n            filters.push({\n                services: [service],\n                name: options === null || options === void 0 ? void 0 : options.name,\n                namePrefix: options === null || options === void 0 ? void 0 : options.namePrefix,\n            });\n        }\n        if (((options === null || options === void 0 ? void 0 : options.name) || (options === null || options === void 0 ? void 0 : options.namePrefix)) && filters.length === 0) {\n            filters.push({\n                name: options.name,\n                namePrefix: options.namePrefix,\n            });\n        }\n        return filters;\n    }\n    getDeviceFromMap(deviceId) {\n        const device = this.deviceMap.get(deviceId);\n        if (device === undefined) {\n            throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n        }\n        return device;\n    }\n    getBleDevice(device) {\n        var _a;\n        const bleDevice = {\n            deviceId: device.id,\n            // use undefined instead of null if name is not available\n            name: (_a = device.name) !== null && _a !== void 0 ? _a : undefined,\n            uuids: device.uuids,\n        };\n        return bleDevice;\n    }\n}\nexport const BluetoothLe = new BluetoothLeWeb();\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}